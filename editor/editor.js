// Generated by CoffeeScript 1.10.0
(function() {
  var KeyListener, count, loadSampleText;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  count = function(arr, target) {
    var elem, i, len, occ;
    occ = 0;
    for (i = 0, len = arr.length; i < len; i++) {
      elem = arr[i];
      if (elem === target) {
        occ++;
      }
    }
    return occ;
  };

  KeyListener = (function() {
    KeyListener.prototype.MAX_TIME_BETWEEN_STROKES = 750;

    KeyListener.prototype.Keys = {
      left: 37,
      right: 39,
      up: 38,
      down: 40
    };

    KeyListener.property('seqStart', {
      set: function(index) {
        return this._seqStartIndex = index;
      },
      get: function() {
        var startOfLine, textToCursor;
        textToCursor = this.elem.text().slice(0, this._seqStartIndex);
        startOfLine = textToCursor.lastIndexOf('\n');
        return {
          line: count(textToCursor, '\n') + 1,
          col: this._seqStartIndex - startOfLine
        };
      }
    });

    function KeyListener(elem1) {
      var code, name, ref, self;
      this.elem = elem1;
      self = this;
      this.elem.keydown(function() {
        return self.registerKey(event.which);
      });
      this.keyNames = {};
      ref = this.Keys;
      for (name in ref) {
        code = ref[name];
        this.keyNames[code] = name;
      }
      this.currSeq = [];
    }

    KeyListener.prototype.registerKey = function(code) {
      var key;
      if (this.keyNames[code] == null) {
        return;
      }
      if (this.currSeq.length === 0) {
        this.seqStart = this.elem[0].selectionStart;
      }
      key = this.keyNames[code];
      this.currSeq.push(key);
      if (this.timer != null) {
        clearTimeout(this.timer);
      }
      return this.timer = setTimeout(this.processSeq.bind(this), this.MAX_TIME_BETWEEN_STROKES);
    };

    KeyListener.prototype.processSeq = function() {
      console.log("processing sequence " + this.currSeq + " with start line = " + this.seqStart.line + ", col=" + this.seqStart.col);
      this.currSeq = [];
      return this.timer = null;
    };

    return KeyListener;

  })();

  $(function() {
    var listener;
    loadSampleText();
    return listener = new KeyListener($("#editor-text"));
  });

  loadSampleText = function() {
    return $.ajax({
      url: "sampleEditorText.txt",
      dataType: "text",
      success: function(data) {
        return $("#editor-text").text(data);
      }
    });
  };

}).call(this);

//# sourceMappingURL=editor.js.map
